Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

// brute force 1

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        // Brute force: check each element
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == target){
                    return true;
                }
            }
        }
        
        return false;
    }
};


..brute force 2

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();

        for(int i=0;i<n;i++){
            int left=0;
            int right=m-1;

            while(left<=right){
                int mid=left+(right-left)/2;

                if(matrix[i][mid]==target){
                    return true;
                }
                else if(matrix[i][mid]<target){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }


        }
        return false;
    }
};

//optimizeed
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int i=0;
        int n=matrix.size();
        int m=matrix[0].size();
        int j=m-1;
        while(i<n && j>=0){
           if(target==matrix[i][j]){
            return true;
           }
            else if(target> matrix[i][j]){
                i++;
            }
            else{
                j--;
            }
        }
        return false;
    }
};